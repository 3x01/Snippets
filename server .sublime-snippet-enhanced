<snippet>
	<content><![CDATA[
'use strict';



// GET ENVS LOADED IN DEV
const result = require('dotenv').config();

// REQUIRE LIBS
const http = require('http');
const dotenv = require('dotenv');
const express = require('express');
const cookieParser = require('cookie-parser');
// REQUIRE SCRIPTS

var app = express();

// app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.get('/', (req, res, next) => {
	console.log('Hit /')
  res.sendStatus(204);
});

app.use('${1:/api}', (req, res, next) => {
	console.log('Hit /Api');
  res.sendStatus(204);
});

// error handler
app.use(function(err, req, res, next) {
  res.locals.message = err.message;
  // render the error page
  res.sendStatus(500);
});


// LOAD ENV VARS
const port = parseInt(process.env.PORT) || 1337;

// CONFIG SERVER
app.set('port', port);

var server = http.createServer(app);

// STAND UP SERVER
server.on('error', onError);
server.on('listening', onListening);
server.listen(port);

// DEFINE LISTENERS
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  const listenErrHandlers = {
    EACCES: error => {
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    },
    EADDRINUSE: error => {
      console.error(bind + ' is already in use');
      process.exit(1);
    },
    default: error => {
      throw error;
    }
  };

  // HANDLE SPECIFIC LISTEN ERRORS WITH FRIENDLY MESSAGES
  (listenErrHandlers[error.code] || listenErrHandlers['default'])();
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log(
    '--------------------------------------------------------------------------------'
  );
  console.log(
    `\${new Date().toISOString()} | Server running, listening on \${bind}`
  );
  console.log(
    '--------------------------------------------------------------------------------'
  );
}

]]></content>
	<tabTrigger>server</tabTrigger>
	<scope>source.js</scope>
	<description></description>
</snippet>